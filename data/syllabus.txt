Тема 1: Введение в тестирование программного обеспечения

Тестирование — это процесс проверки и верификации того, что система соответствует заданным требованиям и работает корректно в различных условиях. Основная цель тестирования — выявление дефектов до попадания продукта к конечному пользователю.

Тема 2: Виды тестирования

Существует множество видов тестирования. Функциональное тестирование проверяет соответствие поведения системы спецификациям. Нефункциональное тестирование оценивает такие аспекты, как производительность, безопасность, удобство использования и надёжность. Регрессионное тестирование проводится после изменений в коде, чтобы убедиться, что старая функциональность не сломалась. Smoke-тестирование — это базовая проверка критически важных функций после сборки, чтобы понять, можно ли продолжать тестирование.

Тема 3: Жизненный цикл дефекта (бага)

Когда тестировщик находит ошибку, он создаёт баг-репорт. Баг проходит следующие стадии: New (новый), Open (принят в работу), In Progress (в разработке), Fixed (исправлен), Verified (проверен тестировщиком), Closed (закрыт). Если при верификации ошибка не устранена, статус меняется на Reopened.

Тема 4: Тестовая документация

Основные виды тестовой документации: тест-план (описывает стратегию, ресурсы, сроки), тест-кейсы (пошаговые инструкции с ожидаемым результатом), чек-листы (упрощённый формат без детализации шагов), отчёты о тестировании (итоги прогона).

Тема 5: Методы тест-дизайна

Эквивалентное разбиение — разделение входных данных на классы, где поведение системы должно быть одинаковым. Анализ граничных значений фокусируется на значениях на границах этих классов (например, минимальное и максимальное допустимое число). Причинно-следственная связь (cause-effect) помогает моделировать комбинации условий и их результаты.

Тема 6: Автоматизация тестирования

Автоматизация эффективна для регрессионных, дымовых и нагрузочных тестов. Не стоит автоматизировать: разовые тесты, UX-проверки, тесты с частыми изменениями UI. Популярные фреймворки: Selenium для веба, Appium для мобильных приложений, Pytest и JUnit как тестовые раннеры.

Тема 7: Smoke-тестирование — подробнее

Smoke-тестирование (или "проверка сборки") выполняется сразу после получения новой версии ПО. Его цель — быстро убедиться, что основные функции работают и дальнейшее тестирование имеет смысл. Если smoke-тесты падают, сборка считается нестабильной и возвращается разработчикам.

Тема 8: Регрессионное тестирование — детали

Регрессионное тестирование может быть полным (все тест-кейсы) или частичным (только затронутые модули). Часто автоматизируется, так как выполняется многократно. Важно поддерживать актуальность регрессионного набора — удалять устаревшие и добавлять новые кейсы после багфиксов.